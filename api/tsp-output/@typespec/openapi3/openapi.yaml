openapi: 3.0.0
info:
  title: Wyrd Internal API
  version: 0.0.0
tags: []
paths:
  /account/auth/login/phone:
    post:
      operationId: AccountAuthAPI_login
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                  refresh:
                    type: string
                required:
                  - access
                  - refresh
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    enum:
                      - verifyIdToken is invalid.
                required:
                  - message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountAuthAPI.PhoneLoginBody'
  /account/auth/logout:
    delete:
      operationId: AccountAuthAPI_logout
      description: logout user in backend and remove device token
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
        '400':
          description: The server could not understand the request due to invalid syntax.
      security:
        - BearerAuth: []
  /account/auth/token/refresh:
    post:
      operationId: AccountAuthAPI_refresh
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                required:
                  - access
        '400':
          description: The server could not understand the request due to invalid syntax.
        '401':
          description: Access is unauthorized.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh:
                  type: string
              required:
                - refresh
      security:
        - BearerAuth: []
  /account/dating/profile:
    post:
      operationId: DatingProfileAPI_create
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableDatingAccount'
        '400':
          description: The server could not understand the request due to invalid syntax.
        '401':
          description: Access is unauthorized.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDatingAccount'
      security:
        - BearerAuth: []
    get:
      operationId: DatingProfileAPI_read
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableDatingAccount'
      security:
        - BearerAuth: []
    put:
      operationId: DatingProfileAPI_update
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableDatingAccount'
        '400':
          description: The server could not understand the request due to invalid syntax.
        '401':
          description: Access is unauthorized.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/UpdateDatingAccountModel'
                - $ref: '#/components/schemas/SetDatingPreferencesModel'
      security:
        - BearerAuth: []
  /account/device/token:
    post:
      operationId: AccountAPI_set
      description: set FCM device token for notification
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
        '400':
          description: The server could not understand the request due to invalid syntax.
        '401':
          description: Access is unauthorized.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetDeviceCloudMessagingTokenModel'
      security:
        - BearerAuth: []
  /account/interest-tags:
    get:
      operationId: AccountAPI_list
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadableInterestTag'
        '401':
          description: Access is unauthorized.
        '500':
          description: Server error
      security:
        - BearerAuth: []
  /account/me:
    get:
      operationId: AccountAPI_read
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: The server could not understand the request due to invalid syntax.
        '401':
          description: Access is unauthorized.
      security:
        - BearerAuth: []
  /superuser/interest-tag:
    get:
      operationId: InterestTagAPIView_list
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadableInterestTag'
      security:
        - BearerAuth: []
    post:
      operationId: InterestTagAPIView_create
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableInterestTag'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInterestTag'
      security:
        - BearerAuth: []
  /superuser/interest-tag/{pk}:
    get:
      operationId: InterestTagAPIView_read
      parameters:
        - name: pk
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableInterestTag'
        '404':
          description: The server cannot find the requested resource.
      security:
        - BearerAuth: []
    delete:
      operationId: InterestTagAPIView_delete
      parameters:
        - name: pk
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
      security:
        - BearerAuth: []
components:
  schemas:
    AccountAuthAPI.PhoneLoginBody:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: verifyIdToken provided by Firebase Phone Authentication. This token is used to retrieve the user's phone number.
    AgeRange:
      type: object
      required:
        - lower
        - upper
      properties:
        lower:
          type: string
          format: date
        upper:
          type: string
          format: date
    CreateDatingAccount:
      type: object
      required:
        - name
        - dob
        - bio
        - interest_tags
        - gender
        - interested_genders
      properties:
        name:
          type: string
          description: The name of the account holder.
        dob:
          type: string
          format: date
        bio:
          type: string
          description: A brief biography of the account holder.
        interest_tags:
          type: array
          items:
            type: string
          description: The interest tags associated with the account.
        gender:
          allOf:
            - $ref: '#/components/schemas/Gender'
          description: The gender that the account holder is interested in.
        sub_gender:
          anyOf:
            - $ref: '#/components/schemas/SubGendersInMale'
            - $ref: '#/components/schemas/SubGendersInFemale'
            - $ref: '#/components/schemas/SubGendersInNonBinary'
        interested_genders:
          type: array
          items:
            $ref: '#/components/schemas/Gender'
          description: The gender that the account holder is interested in. User can select upto 3 genders.
    CreateInterestTag:
      type: object
      required:
        - tag
      properties:
        tag:
          type: string
          maxLength: 50
          description: The primary key for the model, representing the interest tag.
        icon:
          type: string
          nullable: true
          description: A URL pointing to an icon that visually represents the interest tag.
          default: null
    Gender:
      type: string
      enum:
        - man
        - women
        - non-binary
    Point:
      type: object
      required:
        - type
        - point
      properties:
        type:
          type: string
          default: Point
        point:
          type: array
          items:
            type: number
          minItems: 2
          maxItems: 2
    ReadableDatingAccount:
      type: object
      required:
        - account
        - name
        - dob
        - bio
        - interest_tags
        - gender
        - interested_genders
        - is_active
        - is_premium
        - is_in_relationship
        - current_location
        - current_matches
        - current_active_chats
      properties:
        account:
          type: string
          description: A one-to-one relationship with the User model.
        name:
          type: string
          description: The name of the account holder.
        dob:
          type: string
          format: date
        bio:
          type: string
          description: A brief biography of the account holder.
        interest_tags:
          type: array
          items:
            type: string
          description: The interest tags associated with the account.
        gender:
          allOf:
            - $ref: '#/components/schemas/Gender'
          description: The gender that the account holder is interested in.
        sub_gender:
          anyOf:
            - $ref: '#/components/schemas/SubGendersInMale'
            - $ref: '#/components/schemas/SubGendersInFemale'
            - $ref: '#/components/schemas/SubGendersInNonBinary'
        interested_genders:
          type: array
          items:
            $ref: '#/components/schemas/Gender'
          description: The gender that the account holder is interested in. User can select upto 3 genders.
        is_online:
          type: boolean
        is_active:
          type: boolean
          default: true
        is_premium:
          type: boolean
          default: false
        is_in_relationship:
          type: boolean
          description: |-
            `is_in_relationship` is marked by internal system indicating account's status of relationship.
            This state variable will be used in Matching Pools to remove already in relationship accounts.
          default: false
        avatar:
          type: string
          nullable: true
          default: null
        current_place:
          type: string
          nullable: true
          description: The current place name of the account holder.
          default: null
        current_location:
          allOf:
            - $ref: '#/components/schemas/Point'
          description: Lat long of current location
        current_matches:
          type: integer
          format: int8
          description: Current number of simultaneous matches. These matches exclude dating room matches.
        current_active_chats:
          type: integer
          format: int8
          description: Number of current active chats
        hometown:
          type: string
          nullable: true
          description: The hometown of the account holder.
          default: null
        height:
          type: number
          nullable: true
          description: The height of the account holder, stored in feet format (e.g., 6.9 or 6.11).
          default: null
        search_range:
          type: integer
          format: int16
          description: Search distance range in meters.
          default: 20000
        age_range:
          allOf:
            - $ref: '#/components/schemas/AgeRange'
          description: The age range that the account holder is interested in. default [19,28]
    ReadableInterestTag:
      type: object
      required:
        - tag
      properties:
        tag:
          type: string
          maxLength: 50
          description: The primary key for the model, representing the interest tag.
        icon:
          type: string
          nullable: true
          description: A URL pointing to an icon that visually represents the interest tag.
          default: null
    SetDatingPreferencesModel:
      type: object
      required:
        - interest_tags
        - interested_genders
        - current_location
      properties:
        interest_tags:
          type: array
          items:
            type: string
          description: The interest tags associated with the account.
        interested_genders:
          type: array
          items:
            $ref: '#/components/schemas/Gender'
          description: The gender that the account holder is interested in. User can select upto 3 genders.
        current_location:
          allOf:
            - $ref: '#/components/schemas/Point'
          description: Lat long of current location
        height:
          type: number
          nullable: true
          description: The height of the account holder, stored in feet format (e.g., 6.9 or 6.11).
          default: null
        age_range:
          allOf:
            - $ref: '#/components/schemas/AgeRange'
          description: The age range that the account holder is interested in. default [19,28]
    SetDeviceCloudMessagingTokenModel:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: This field stores the unique device token provided by FCM. It is used to identify the device to which notifications should be sent. This field is the primary key for this model, ensuring each token is unique.
    SubGendersInFemale:
      type: string
      enum:
        - woman
        - demifemale
        - intersex-woman
        - trans-woman
        - trans-femine
    SubGendersInMale:
      type: string
      enum:
        - man
        - demimale
        - intersex-man
        - trans-man
        - trans-masculine
    SubGendersInNonBinary:
      type: string
      enum:
        - non-binary
        - agender
        - bigender
        - gender-non-conforming
        - gender-variant
        - intersex
        - neutrols
        - pangender
        - polygender
        - transgender
        - two-spirit
        - gender-fluid
        - gender-questioning
        - genderqueer
    UpdateDatingAccountModel:
      type: object
      required:
        - name
        - dob
        - bio
        - interest_tags
        - gender
        - interested_genders
        - current_location
      properties:
        name:
          type: string
          description: The name of the account holder.
        dob:
          type: string
          format: date
        bio:
          type: string
          description: A brief biography of the account holder.
        interest_tags:
          type: array
          items:
            type: string
          description: The interest tags associated with the account.
        gender:
          allOf:
            - $ref: '#/components/schemas/Gender'
          description: The gender that the account holder is interested in.
        sub_gender:
          anyOf:
            - $ref: '#/components/schemas/SubGendersInMale'
            - $ref: '#/components/schemas/SubGendersInFemale'
            - $ref: '#/components/schemas/SubGendersInNonBinary'
        interested_genders:
          type: array
          items:
            $ref: '#/components/schemas/Gender'
          description: The gender that the account holder is interested in. User can select upto 3 genders.
        is_online:
          type: boolean
        avatar:
          type: string
          nullable: true
          default: null
        current_place:
          type: string
          nullable: true
          description: The current place name of the account holder.
          default: null
        current_location:
          allOf:
            - $ref: '#/components/schemas/Point'
          description: Lat long of current location
        hometown:
          type: string
          nullable: true
          description: The hometown of the account holder.
          default: null
        height:
          type: number
          nullable: true
          description: The height of the account holder, stored in feet format (e.g., 6.9 or 6.11).
          default: null
        search_range:
          type: integer
          format: int16
          description: Search distance range in meters.
          default: 20000
        age_range:
          allOf:
            - $ref: '#/components/schemas/AgeRange'
          description: The age range that the account holder is interested in. default [19,28]
    User:
      type: object
      required:
        - username
      properties:
        username:
          type: string
        email:
          type: string
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
servers:
  - url: https://example.com
    description: Single server endpoint
    variables: {}
